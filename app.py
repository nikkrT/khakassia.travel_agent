import streamlit as st
from graph.graph import graph_func
from langchain_core.messages import HumanMessage, AIMessage
from tools.memory import memory
import base64

@st.cache_data
def get_img_as_base64(file):
    with open(file, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()

img_path = "images/background/2.jpg"
avatar='images/GigaChat.png'
img_base64 = get_img_as_base64(img_path)


st.markdown(
    f"""
    <style>
    [data-testid="stAppViewContainer"] {{
      background-image: url("data:image/jpg;base64,{img_base64}");
      background-position: center;
      background-size: cover;
    }}
    [data-testid="stHeader"] {{
    background-color: rgba(0, 0, 0, 0);
    }}
    [data-testid="stBottomBlockContainer"]{{
    background-color: rgba(0, 0, 0, 0)!important;
    }}
    </style>
    """,
    unsafe_allow_html=True,
)

st.set_page_config(page_title="–ò–ò-–•–∞–∫–∞—Å–∏—è", layout="wide")
st.title("ü§ñ –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ò–ò-–∞–≥–µ–Ω—Ç –¢–ò–¶ –•–∞–∫–∞—Å–∏—è")

if st.button("–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"):
    memory.clear()
    st.session_state.clear()
    st.rerun()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º ---
if "messages" not in st.session_state:
    st.session_state.messages = [
        AIMessage(content="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –ø–æ—Ä—Ç–∞–ª–∞ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞"
                          " –Ω–∞ –±–∞–∑–µ GigaChat! "
                          "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
    ]
if "params_flow" not in st.session_state:
    st.session_state.params_flow = {
        "accomodation": None,
        "holiday_recommendation": None,
        "nature_recommendation": None
    }

if "usage_logged" not in st.session_state:
    with open('usage.txt', 'a') as f:
        f.write('\n\n---CHAT---\n')
    st.session_state.usage_logged = True

@st.cache_resource
def get_graph():
    return graph_func()

app = get_graph()


for message in st.session_state.messages:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    current_avatar = avatar if message.type == 'ai' else None
    with st.chat_message(message.type, avatar=current_avatar):
        st.markdown(message.content)



if prompt := st.chat_input("–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Ç—É—Ä–∞—Ö..."):
    st.session_state.messages.append(HumanMessage(content=prompt))
    st.rerun()



if st.session_state.messages and st.session_state.messages[-1].type == "human":
    last_user_input = st.session_state.messages[-1].content

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –ø–æ–∫–∞ –∂–¥–µ–º –æ—Ç–≤–µ—Ç
    with st.chat_message("ai", avatar=avatar):
        with st.spinner("–î—É–º–∞—é..."):
            # –°–æ–±–∏—Ä–∞–µ–º state –¥–ª—è –≥—Ä–∞—Ñ–∞
            initial_state = {
                "input": last_user_input,
                # –í—Å—è –∏—Å—Ç–æ—Ä–∏—è, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "chat_history": st.session_state.messages[:-1],
            }

            # –í—ã–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ. –≠—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.
            response_state = app.invoke(initial_state)
            response_content = response_state.get("result", "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            st.session_state.messages.append(AIMessage(content=response_content))

    st.rerun()
